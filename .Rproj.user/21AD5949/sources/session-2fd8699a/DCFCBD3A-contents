---
title: "stoRy time with Shiny, Quarto, and Google Cloud Run"
subtitle: "Write and Illustrate Stories with AI"
format: 
  revealjs:
    transition: "fade"
    backgroundTransition: "fade"
    highlight-style: oblivion
    theme: [night, assets/scss/custom.scss]
---



## What is it?

A web application that:  

* takes the first sentence of a story you want to write  
* uses generative AI models to create a full story with images  

# Let' take a look

[Link to app](https://umair.shinyapps.io/storytimegcp/)

##  {background-image="assets/images/app_main.png"}

##

![](assets/images/app_workflow.gif)

## You can also change the slide theme

![](assets/images/app_change_theme.png)

## You can also change the slide theme

![](assets/images/app_new_theme.png)

## Who am I 

- Umair Durrani

- PhD and Postdoc from University of Windsor

- Data Scientist at Presage Group
  - Develop apps
  - Analyze and present data
  

## Who are you

::: columns
::: {.column width="40%"}

![](assets/images/paul1.png)
:::

::: {.column width="60%"}

<h4>Developer</h4>

<br>

<h4>User</h4>

:::
:::




## Why this project?

![](https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExNWszcm9kaTJqb2ZnbGJjanpxc3JrdG51Z3pwYXk2Mzd0dTZ2bW9jMyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/457NTDOuMmDfO/giphy.gif)


## Why this project?

* Generative AI is great at making stuff up  
* You learn a lot of useful stuff:  

  - Making API requests    
  - Develop web applications  
  - Create parameterized documents  
  
  
# Step 1: Create story text

## How to generate a story with AI?

Several text generation models exist. I used `llama-3.1-8b-instruct` from [Cloudflare Workers AI Models API](https://developers.cloudflare.com/workers-ai/models/).

* Free for all models in beta!

![](assets/images/cloudflare_models.png)


## What's an API?  

> An API is a programmatic way to interact with a webservice that allows us to automate the retrieval of data.

I used the `httr2` R package to make HTTP requests to Cloudflare Workers AI Models endpoint

::: footer
Source: [Talk by Ted Laderas](https://laderast.github.io/intro_apis_json_cascadia/#/what-are-apis)
:::



## Function to generate story

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "1-6|18-22|23-30|31-34|35-39"
get_story <- function(prompt,
                      num_of_sentences = 5,
                      max_tokens = 1000,
                      ACCOUNT_ID = Sys.getenv("ACCOUNT_ID"),
                      API_KEY = Sys.getenv("API_KEY"),
                      base_url = cf_base_url()){

  if (is.null(prompt) | num_of_sentences < 3){
    return(NULL)
  }

  if (test_profanity(prompt)){
    return(NULL)
  }

  url_txt <- paste0(base_url, ACCOUNT_ID, "/ai/run/@cf/meta/llama-3.1-8b-instruct")

  # Make an API request
  response_text <- httr2::request(url_txt) |>
    httr2::req_headers(
      "Authorization" = paste("Bearer", API_KEY)
    ) |>
    httr2::req_body_json(list(
      max_tokens = max_tokens,
      messages = list(
        list(role = "system",
             content = paste0("You tell short stories.
             Each sentence must describe all details.
             Each story must have ",  num_of_sentences,  " sentences.
             The story must have a beginning, a climax and an end.")),
        list(
          role = "user",
          content = prompt
        )
      ))) |>
    httr2::req_method("POST") |>
    httr2::req_error(is_error = \(resp) FALSE) |>
    httr2::req_perform() |>
    httr2::resp_body_json()

  # If response is successful, append it to the user prompt
  # clean it, and split the text into 5 sentences
  if (isTRUE(response_text$success)){
    full_text <- response_text$result$response #paste(prompt, response_text$result$response)
    cleaned_text <- gsub("\n", "", full_text)
    split_text <- unlist(strsplit(cleaned_text, "(?<=[.])\\s*(?=[A-Z])", perl = TRUE))
  } else {
    split_text <- NULL
  }

  # c(prompt, split_text)
  split_text
}
```

## Test the function

```{r}
#| echo: true
#| eval: false
new_story <- get_story(
  prompt = "There once was a prince in the land of Persia.",
  num_of_sentences = 3
)
```

Generates:  

```{r}
#| echo: true
#| eval: false
[1] "He wore a intricately designed golden crown, adorned with precious rubies and diamonds that caught the light of a full moon, and from the moment he was born, he was destined for greatness."                                               
[2] "On his seventh name-day, the prince rode his white stallion, Majdool, through the crowded market of Isfahan, where merchants in tunics and turbans waved in reverence as he passed by, their faces pressed against the walls of their stalls, watching the prince's stately procession."
[3] "As he approached the grand square, the prince's horse let out a high-pitched whinny, and the prince's mother, the queen, gently corrected the animal with a soft voice, though her eyes were fixed adoringly on her son."  
```


# Step 2: Create images for illustration

## Use Stable Diffusion to generate images

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "1:5|7|9-18|21-29"
# Function to request a single image
req_single_image <- function(prompt,
                             instructions,
                             ACCOUNT_ID = Sys.getenv("ACCOUNT_ID"),
                             API_KEY = Sys.getenv("API_KEY"),
                             base_url = cf_base_url()){

  url_img <- paste0("https://api.cloudflare.com/client/v4/accounts/", ACCOUNT_ID, "/ai/run/@cf/bytedance/stable-diffusion-xl-lightning")

  # Create the request
  httr2::request(url_img) |>
    httr2::req_headers(
      "Authorization" = paste("Bearer", API_KEY)
    ) |>
    httr2::req_body_json(list(prompt = paste0(
      prompt, " ",
      instructions
    ))) |>
    httr2::req_method("POST")
}

# Get image if request is successful
get_image <- function(response){
  if (response$status_code == 200){
    png_img <- httr2::resp_body_raw(response)
  } else{
    png_img <- NULL
  }
  png_img
}

```

## Generate some images

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "1-7|8|9-10"
image_prompt <- "This scene should be illustrated ..."
reqs <- lapply(
  new_story,
  function(x){
    req_single_image(x, image_prompt)
  }
)
resps <- httr2::req_perform_parallel(reqs, on_error = "continue")
# All images
new_all_imgs <- lapply(resps, get_image)
```

::: {layout-ncol=3}

![](assets/images/story_img1.jpeg)

![](assets/images/story_img2.jpeg)

![](assets/images/story_img3.jpeg)
::: 


# Step 3: Creating Slides 

## Quarto 

> An open-source scientific and technical publishing system  

![](assets/images/quarto.png)

I used parameters in the quarto file and the `quarto` R package.

## Quarto file

YAML options:  
```{r}
#| echo: true
#| eval: false
---
title: "stoRy time with shiny and quarto"
author: "A story written by you & AI"
format: 
    revealjs:
      embed-resources: true
      center: true
      transition: slide
      background-transition: fade
params:
  story_prompt: ""
  story: ""
  imgs: ""
---
```

## quarto package

```{r}
#| echo: true
#| eval: false
quarto::quarto_render(
  input = "<QUARTO FILE>",
  output_format = "all",
  metadata = list(
    theme = "<REVEAL JS THEME>",
    "title-slide-attributes" = list(
      "data-background-image" = paste0("data:image/png;base64,", base64enc::base64encode(utils::tail(new_all_imgs, 1)[[1]])),
      "data-background-size" = "cover",
      "data-background-opacity" = 0.3
    )
  ),
  quarto_args = c(
    "--metadata",
    paste0("title=", "<STORY TITLE>")
  ),
  execute_params = list(
    story_prompt = "<STORY PROMPT>",
    story = "<STORY TEXT>",
    imgs = lapply(new_all_imgs, base64enc::base64encode)
  )
)
```


# Step 4: Create a web app

## Shiny web application

![](assets/images/shiny.png)

## Shiny web application

![](assets/images/shiny_anatomy.png)
::: footer
Source: [The Anatomy of a Shiny Application](https://hosting.analythium.io/the-anatomy-of-a-shiny-application/)
:::


# Step 5: Deploy the application

## Google Cloud Run

![](assets/images/gcr.png)


## Google Cloud Run deployment

![](assets/images/gcr_workflow.gif)
